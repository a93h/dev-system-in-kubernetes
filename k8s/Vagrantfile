Vagrant.configure("2") do |config|

  # Sync time with the local host
  #config.vm.provider 'virtualbox' do |vb|
  #  vb.customize [ "guestproperty", "set", :id, "/VirtualBox/GuestAdd/VBoxService/--timesync-set-threshold", 1000 ]
  #end
  # CHANGE!
  config.vm.provider 'vmware_workstation'

  # CHANGE!
  $num_instances = 5

  (1..$num_instances).each do |i|

    config.vm.define "k8s-c17-n#{i}" do |node|
    # Xenial is a bit old but works best at the moment. Kubectl repo seems to be
    # available for Xenial only currently
    # node.vm.box = "ubuntu/xenial64"
    node.vm.box = "bento/ubuntu-20.04"
    node.vm.hostname = "k8s-c17-n#{i}"
    ip = "192.168.17.#{i+200}"
    node.vm.network "private_network", ip: ip
    # Change the share to match your environment
    # CHANGE!
    node.vm.synced_folder "G:\\Users\\names\\SyncStuff\\Work\\Development System\\k8s\\SHARE", "/home/vagrant/share"
    # CHANGE!
    node.vm.provider 'vmware_workstation' do |vb|
      # CHANGE!
      vb.memory = "8192"
      # K8s requires at least 2 CPUs
      # CHANGE!
      vb.cpus = 2
      # vb.name = "k8s-c17-n#{i}"
      # https://www.vagrantup.com/docs/providers/vmware/configuration#provider-settings
      # CHANGE!
      vb.vmx['displayname'] = "k8s-c17-n#{i}"
    end

    node.vm.provision "shell" do |s|
      s.inline = <<-SHELL
        echo "-------------------------------------------------------------------------- Update hosts file"
cat >> /etc/hosts <<EOF
192.168.17.201 k8s-c17-n1
192.168.17.202 k8s-c17-n2
192.168.17.203 k8s-c17-n3
192.168.17.204 k8s-c17-n4
192.168.17.205 k8s-c17-n5
EOF
cat /etc/hosts
echo "-------------------------------------------------------------------------- Update DNS settings"
echo "nameserver 1.1.1.1">/etc/resolv.conf
cat /etc/resolv.conf
echo "-------------------------------------------------------------------------- Disable swap"
swapoff -a
sed -i '/swap/s/^/#/' /etc/fstab
echo "-------------------------------------------------------------------------- Disable firewall"
ufw disable
echo "-------------------------------------------------------------------------- Adding required apt keys and Kubernetes repos"
wget -qO- https://packages.cloud.google.com/apt/doc/apt-key.gpg > /home/vagrant/apt-key.gpg
apt-key add /home/vagrant/apt-key.gpg
echo "apt_preserve_sources_list: true" >> /etc/cloud/cloud.cfg
apt-add-repository "deb http://apt.kubernetes.io/ kubernetes-xenial main"
apt-get update
echo "-------------------------------------------------------------------------- Install SSH keys"
# wget -qO- https://raw.githubusercontent.com/jonas-werner/pubkeys/master/nopass.pub >> /home/vagrant/.ssh/authorized_keys
echo "-------------------------------------------------------------------------- Installing Kubeadm and Docker"
apt-get install -y kubeadm=1.21.3-00 kubectl=1.21.3-00 kubelet=1.21.3-00
### Install packages to allow apt to use a repository over HTTPS
apt-get update && apt-get install apt-transport-https ca-certificates curl software-properties-common -y
### Install Docker
curl -fsSL https://get.docker.com -o get-docker.sh
sh get-docker.sh
# Setup daemon.
cat > /etc/docker/daemon.json <<EOF
{
  "exec-opts": ["native.cgroupdriver=systemd"],
  "log-driver": "json-file",
  "log-opts": {
    "max-size": "100m"
  },
  "storage-driver": "overlay2"
}
EOF
mkdir -p /etc/systemd/system/docker.service.d
# Restart docker.
systemctl daemon-reload
systemctl restart docker
# Enable packet forwarding
# configure sysctl
modprobe overlay
modprobe br_netfilter

tee /etc/sysctl.d/kubernetes.conf<<EOF
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
net.ipv4.ip_forward = 1
EOF

sysctl --system
###### MASTER NODE START ######
if [[ #{i} -eq 1 ]];then
  echo "-------------------------------------------------------------------------- Configuring Master node"
  systemctl enable kubelet
  systemctl start kubelet
  kubeadm init --apiserver-advertise-address=192.168.17.201 --pod-network-cidr=10.244.0.0/16 | tee /home/vagrant/k8s-install.log
  cat /home/vagrant/k8s-install.log | grep "kubeadm join" > /home/vagrant/share/cluster-join.sh
  echo "--discovery-token-unsafe-skip-ca-verification" >> /home/vagrant/share/cluster-join.sh
  mkdir -p /home/vagrant/.kube
  cp -i /etc/kubernetes/admin.conf /home/vagrant/.kube/config
  chown vagrant:vagrant /home/vagrant/.kube/config
  # helm
  curl https://baltocdn.com/helm/signing.asc | apt-key add -
  apt-get install apt-transport-https --yes
  echo "deb https://baltocdn.com/helm/stable/debian/ all main" | tee /etc/apt/sources.list.d/helm-stable-debian.list
  apt-get update
  apt-get install helm
  helm update repo
  # flannel
  echo "-------------------------------------------------------------------------- Installing Flannel network"
  runuser -l vagrant -c "kubectl apply -f /home/vagrant/share/kube-flannel.yml"
  # metallb
  echo "-------------------------------------------------------------------------- Installing and configuring LoadBalancer"
  runuser -l vagrant -c "helm repo add metallb https://metallb.github.io/metallb"
  runuser -l vagrant -c "helm install metallb metallb/metallb -f /home/vagrant/share/metallb-values.yaml"
  # rancher
  echo "-------------------------------------------------------------------------- Preparing rancher"
  runuser -l vagrant -c "helm repo add rancher-stable https://releases.rancher.com/server-charts/stable"
  runuser -l vagrant -c "kubectl create namespace cattle-system"
  runuser -l vagrant -c "helm repo update"
  echo "-------------------------------------------------------------------------- Installing cert manager"
  runuser -l vagrant -c "kubectl apply -f https://github.com/jetstack/cert-manager/releases/download/v1.0.4/cert-manager.crds.yaml"
  runuser -l vagrant -c "kubectl create namespace cert-manager"
  runuser -l vagrant -c "helm repo add jetstack https://charts.jetstack.io"
  runuser -l vagrant -c "helm repo update"
  runuser -l vagrant -c "helm install \
    cert-manager jetstack/cert-manager \
    --namespace cert-manager \
    --version v1.0.4"
  echo "-------------------------------------------------------------------------- Installing rancher"
  runuser -l vagrant -c "helm install rancher rancher-stable/rancher \
  --namespace cattle-system \
  --set hostname=my.rancher.local"
  echo "-------------------------------------------------------------------------- Installing traefik"
  runuser -l vagrant -c "helm repo add traefik https://helm.traefik.io/traefik"
  runuser -l vagrant -c "helm repo update"
fi
###### MASTER NODE END ######
###### WORKER NODE START ######
if [[ #{i} -gt 1 ]];then
  echo "-------------------------------------------------------------------------- Configuring Worker node"
  cp /home/vagrant/share/cluster-join.sh /home/vagrant/cluster-join.sh
  chmod 755 /home/vagrant/cluster-join.sh
  /home/vagrant/cluster-join.sh
fi
###### WORKER NODE END ######
      SHELL
      end
    end
  end
end
